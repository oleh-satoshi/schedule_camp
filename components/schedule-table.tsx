import type React from "react"
// --- DATA DEFINITIONS ---
type ActivityType = "–°–ø–æ—Ä—Ç" | "–ü–æ–¥–µ–ª–∫–∏" | "–ë–∞—Ç—É—Ç" | "–ö–≤–µ—Å—Ç"

interface ActivityDetail {
  emoji: string
  bgColor: string
  textColor: string
  borderColor: string
  name: string
}

const activityDetails: Record<ActivityType, ActivityDetail> = {
  –°–ø–æ—Ä—Ç: {
    name: "–°–ø–æ—Ä—Ç",
    emoji: "üèÉ",
    bgColor: "bg-green-50",
    textColor: "text-green-700",
    borderColor: "border-green-200",
  },
  –ü–æ–¥–µ–ª–∫–∏: {
    name: "–ü–æ–¥–µ–ª–∫–∏",
    emoji: "üé®",
    bgColor: "bg-purple-50",
    textColor: "text-purple-700",
    borderColor: "border-purple-200",
  },
  –ë–∞—Ç—É—Ç: { name: "–ë–∞—Ç—É—Ç", emoji: "ü§∏", bgColor: "bg-sky-50", textColor: "text-sky-700", borderColor: "border-sky-200" },
  –ö–≤–µ—Å—Ç: {
    name: "–ö–≤–µ—Å—Ç",
    emoji: "üïµÔ∏è",
    bgColor: "bg-orange-50",
    textColor: "text-orange-700",
    borderColor: "border-orange-200",
  },
}

interface SquadActivityRow {
  type: "squads"
  time: string
  squad1: ActivityType
  squad2: ActivityType
  squad3: ActivityType
  squad4: ActivityType
}

interface CommonActivityRow {
  type: "common"
  time: string
  description: string
  emoji?: string
}

interface DividerRow {
  type: "divider"
}

type ScheduleItem = SquadActivityRow | CommonActivityRow | DividerRow

const scheduleData: ScheduleItem[] = [
  { type: "common", time: "8:00‚Äì9:00", description: "–ü–ª–∞–Ω–µ—Ä–∫–∞, –º–æ–ª–∏—Ç–≤–∞", emoji: "üìù" },
  { type: "common", time: "9:00‚Äì9:10", description: "–°–±–æ—Ä, –º–æ–ª–∏—Ç–≤–∞", emoji: "üôè" },
  { type: "common", time: "9:10‚Äì9:20", description: "–ó–∞—Ä—è–¥–∫–∞", emoji: "ü§∏‚Äç‚ôÄÔ∏è" },
  { type: "common", time: "9:20‚Äì9:30", description: "–ó–∞–≤—Ç—Ä–∞–∫", emoji: "üçΩÔ∏è" },
  { type: "squads", time: "9:30‚Äì10:30", squad1: "–°–ø–æ—Ä—Ç", squad2: "–ü–æ–¥–µ–ª–∫–∏", squad3: "–ë–∞—Ç—É—Ç", squad4: "–ö–≤–µ—Å—Ç" },
  { type: "squads", time: "10:30‚Äì11:30", squad1: "–ü–æ–¥–µ–ª–∫–∏", squad2: "–ë–∞—Ç—É—Ç", squad3: "–ö–≤–µ—Å—Ç", squad4: "–°–ø–æ—Ä—Ç" },
  { type: "squads", time: "11:30‚Äì12:30", squad1: "–ë–∞—Ç—É—Ç", squad2: "–ö–≤–µ—Å—Ç", squad3: "–°–ø–æ—Ä—Ç", squad4: "–ü–æ–¥–µ–ª–∫–∏" },
  { type: "squads", time: "12:30‚Äì13:30", squad1: "–ö–≤–µ—Å—Ç", squad2: "–°–ø–æ—Ä—Ç", squad3: "–ü–æ–¥–µ–ª–∫–∏", squad4: "–ë–∞—Ç—É—Ç" },
  { type: "divider" },
  { type: "common", time: "15:30‚Äì16:30", description: "–û–±—â–µ–ª–∞–≥–µ—Ä–Ω–∞—è –∏–≥—Ä–∞", emoji: "üéÆ" },
  { type: "common", time: "16:30‚Äì17:15", description: "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —á–∞—Å", emoji: "üé∂" },
  { type: "common", time: "17:15‚Äì17:30", description: "–£–∂–∏–Ω", emoji: "üçΩÔ∏è" },
  { type: "common", time: "17:30‚Äì18:00", description: "–°–ª—É–∂–µ–Ω–∏–µ", emoji: "üïäÔ∏è" },
  { type: "common", time: "18:00‚Äì19:00", description: "–ü–ª–∞–Ω—ë—Ä–∫–∞, —É–±–æ—Ä–∫–∞, –º–æ–ª–∏—Ç–≤–∞", emoji: "üßπüôè" },
]

const squadHeaders = ["–û—Ç—Ä—è–¥ 1", "–û—Ç—Ä—è–¥ 2", "–û—Ç—Ä—è–¥ 3", "–û—Ç—Ä—è–¥ 4"]

export function ScheduleTable() {
  return (
    <div className="bg-white p-3 sm:p-4 md:p-6 rounded-xl shadow-lg w-full max-w-5xl mx-auto">
      <div className="overflow-x-auto">
        <table className="w-full min-w-[700px] border-collapse">
          <thead>
            <tr className="border-b border-gray-200">
              <th className="p-2 sm:p-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky left-0 bg-white z-10 w-24 sm:w-28 shrink-0">
                –í—Ä–µ–º—è
              </th>
              <th
                colSpan={4}
                className="p-2 sm:p-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
              </th>
            </tr>
          </thead>
          <tbody>
            {(() => {
              const rows: React.ReactNode[] = []
              let squadSubHeaderRendered = false

              scheduleData.forEach((item, rowIndex) => {
                if (item.type === "squads" && !squadSubHeaderRendered) {
                  const firstSquadRow = scheduleData.find((d) => d.type === "squads")
                  if (item === firstSquadRow) {
                    squadSubHeaderRendered = true
                    rows.push(
                      <tr key="squad-subheader" className="border-b border-gray-200 bg-gray-50">
                        <td className="p-2 sm:p-3 sticky left-0 bg-gray-50 z-10 shrink-0 w-24 sm:w-28"></td>
                        {squadHeaders.map((header) => (
                          <th
                            key={header}
                            className="p-2 sm:p-3 text-center text-xs font-medium text-gray-600 align-top"
                          >
                            {header}
                          </th>
                        ))}
                      </tr>,
                    )
                  }
                }

                if (item.type === "divider") {
                  rows.push(
                    <tr key={`divider-${rowIndex}`}>
                      <td colSpan={5} className="py-1 px-2 sm:px-3">
                        <div className="w-full h-px bg-gray-200 my-1 sm:my-2" />
                      </td>
                    </tr>,
                  )
                } else if (item.type === "common") {
                  rows.push(
                    <tr key={`common-${rowIndex}`} className="border-b border-gray-200 last:border-b-0 group">
                      <td className="p-2 sm:p-3 text-xs font-medium text-gray-700 whitespace-nowrap sticky left-0 bg-white z-10 group-hover:bg-gray-50 shrink-0 w-24 sm:w-28">
                        {item.time}
                      </td>
                      <td colSpan={4} className="p-2 sm:p-3 group-hover:bg-gray-50">
                        <div className="flex items-center">
                          {item.emoji && <span className="text-lg sm:text-xl mr-2 sm:mr-3">{item.emoji}</span>}
                          <span className="text-sm text-gray-800">{item.description}</span>
                        </div>
                      </td>
                    </tr>,
                  )
                } else if (item.type === "squads") {
                  rows.push(
                    <tr key={`squads-${rowIndex}`} className="border-b border-gray-200 last:border-b-0 group">
                      <td className="p-2 sm:p-3 text-xs font-medium text-gray-700 whitespace-nowrap sticky left-0 bg-white z-10 group-hover:bg-gray-50 shrink-0 w-24 sm:w-28">
                        {item.time}
                      </td>
                      {(["squad1", "squad2", "squad3", "squad4"] as const).map((squadKey) => {
                        const activityType = item[squadKey]
                        if (!activityType)
                          return <td key={squadKey} className="p-1.5 sm:p-2 align-top group-hover:bg-gray-50"></td>

                        const details = activityDetails[activityType]
                        return (
                          <td key={squadKey} className="p-1.5 sm:p-2 align-top group-hover:bg-gray-50">
                            <div
                              className={`flex items-center justify-start p-2 sm:p-2.5 rounded-md border ${details.borderColor} ${details.bgColor} ${details.textColor}`}
                            >
                              <span className="text-base mr-1.5">{details.emoji}</span>
                              <span className="text-xs font-semibold leading-snug">{details.name}</span>
                            </div>
                          </td>
                        )
                      })}
                    </tr>,
                  )
                }
              })
              return rows
            })()}
          </tbody>
        </table>
      </div>
    </div>
  )
}
